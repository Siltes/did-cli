#!/usr/bin/env node
/**
 * A Decentralized Identifier client for managing DIDs.
 *
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */
const drivers = require('./lib');
const manage = require('./lib/manage');
const yargs = require('yargs');
const {join} = require('path');

const {homepage} = require(join(__dirname, 'package.json'));

function _setupRemoteCommand(yargs) {
  return yargs
    .option('mode', {
      alias: 'm',
      describe: 'Mode of operation',
      choices: [
        'live',
        'test',
        'dev'
      ],
      default: 'test'
    })
    .option('hostname', {
      alias: 'H',
      describe: 'Hostname (overrides mode/ledger)'
    })
    .option('ledger', {
      alias: 'l',
      describe: 'DID ledger to use',
      choices: [
        'btcr',
        'consensys',
        'sovrin',
        'uport',
        'veres'
      ],
      default: 'veres'
    });
}

function _setupDidCommand(yargs) {
  return _setupRemoteCommand(yargs)
    .positional('did', {
      describe: 'Target DID',
      type: 'string'
    });
}

function _setupOcapCommand(yargs) {
  return yargs
    .positional('invoker', {
      describe: 'DID of the invoker',
      type: 'string'
    });
}

// FIXME: Fix for nginx-proxied nodes for node.js 8.x.x
const tls = require('tls');
tls.DEFAULT_ECDH_CURVE = 'auto';

// setup the command line
const argv = yargs
  // FIXME: output prolog help text
  //.usage('$0 <command>',
  //  'A program to manage Decentralized Identifiers (DIDs)')

  // list DIDs
  .command(['list', 'ls'], 'List local DIDs', yargs => {
    yargs
      .option('filename', {
        describe: 'Print filenames',
        type: 'boolean',
        default: false
      });
  }, argv => manage.list({
    filename: argv.filename
  }))

  .command(['remove <did>', 'rm'], 'Remove local DID', yargs => {
    yargs
      .positional('did', {
        describe: 'DID to remove',
        type: 'string'
      });
  }, argv => manage.remove(argv.did))

  .command(['info <did>', 'i'], 'Show DID information', yargs => {
    yargs
      .positional('did', {
        describe: 'DID to show',
        type: 'string'
      })
      .option('format', {
        alias: 'f',
        describe: 'Output data format',
        choices: [
          'human',
          'json'
        ],
        default: 'human'
      })
      .option('public-key', {
        describe: 'Show public key #1',
      })
      .option('private-key', {
        describe: 'Show private key #1',
      });
  }, argv => manage.info(argv.did, {
    format: argv.format,
    publicKey: argv.publicKey,
    privateKey: argv.privateKey
  }))

  // create a DID
  .command('create', 'Create a DID', yargs => {
    _setupRemoteCommand(yargs)
      .option('did', {
        alias: 'd',
        describe: 'Authorization DID',
        type: 'string'
      })
      .option('accelerator', {
        alias: 'a',
        describe: 'Accelerator hostname[:port]',
        type: 'string'
      })
      .option('type', {
        alias: 't',
        describe: 'Key type',
        choices: [
          'ed25519',
          'rsa'
        ],
        default: 'ed25519'
      })
      .implies('accelerator', 'did');
  }, argv => _runLedgerCommand('create', argv))

  // get an existing DID Document
  .command('get <did>', 'Retrieves an existing DID Document', yargs => {
    _setupDidCommand(yargs);
  }, argv => _runLedgerCommand('get', argv))

  // add an authentication key to a DID Document
  .command('authn-add <did>', 'Add an authentication key to a DID', yargs => {
    _setupDidCommand(yargs);
  }, argv => _runLedgerCommand('authn-add', argv))

  // rotate an authentication key for a DID document
  .command('authn-rotate <did> <old-key>',
    'Rotate an existing DID authentication key', yargs => {
      _setupDidCommand(yargs)
        .positional('old-key', {
          describe: 'The old key identifier to rotate out',
          type: 'string'
        });
    }, argv => _runLedgerCommand('authn-rotate', argv))

  // add an object capability DID Document
  .command('ocap-add <did> <invoker>',
    'Add an object capability DID Document', yargs => {
      // FIXME
      _setupDidCommand(yargs);
      _setupOcapCommand(yargs);
    }, argv => _runLedgerCommand('ocap-add', argv))
    //.option('-d, --DID', 'The DID of the invocation target')
    //.option('-i, --invoker', 'The DID of the invoker')

  // revoke an object capability DID Document
  .command('ocap-revoke <did>',
    'Remove an object capability DID Document', yargs => {
      // FIXME
      _setupDidCommand(yargs);
      //_setupOcapCommand(yargs);
    }, argv => _runLedgerCommand('ocap-revoke', argv))
    //.option('-d, --DID', 'The DID of the object capability to revoke')

  // general
  // FIXME: add per-command completion support
  .completion()
  /*
  .completion('completion', (current, argv) => {
  })
  */
  .demandCommand(1, 'Please specify a command to execute.')
  .help('h')
  .alias('h', 'help')
  .count('v')
  .describe('v', 'Increase verbosity')
  .alias('v', 'verbose')
  .epilog(`Documentation: ${homepage}`)

  // examples
  .example(
    '$0 create',
    'Create a DID')
  .example(
    '$0 authn-add did:example:1234',
    'Add DID authentication key')
  .example(
    '$0 authn-rotate did:example:1234',
    'Rotate DID authentication key')
  .example(
    '$0 authn-remove did:example:1234',
    'Remove DID authentication key')

  .argv;

process.on('unhandledRejection', error => {
  console.error(error);
});

function _runLedgerCommand(command, argv) {
  try {
    const driver = drivers[argv.ledger];
    if(!driver) {
      throw new Error(`"${argv.ledger}" ledger not supported`);
    }
    console.log(
      `Executing "${command}" using ledger "${argv.ledger}"...`);
    const api = driver[command];
    if(!api) {
      throw new Error(`"${command}" not implemented`);
    }
    api(argv);
  } catch(e) {
    console.error(e);
  }
}
