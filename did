#!/usr/bin/env node
/**
 * A Decentralized Identifier client for managing DIDs.
 *
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */
const program = require('commander');
const veres = require('./lib/driver-veres');

const didMethods = {
  veres: veres}

// add help output
program;

// setup the command line
program
  .usage('command [options]')
  .description('A program to manage Decentralized Identifiers (DIDs)')
  .on('--help', () => {
    console.log('\n   Examples:');
    console.log('    $ did create');
    console.log('    $ did auth-add -d 1234');
    console.log('    $ did auth-rotate -d 1234');
    console.log('    $ did auth-remove -d 1234');
    console.log('');
  })
  .option('-d, --did [did]', 'The DID to manage')
  .option('-m, --mode [mode]', 'Mode of operation',
    /^(live|testnet|dev)$/i, 'testnet')
  .option('-l, --ledger [ledger]', 'The DID ledger to use',
    /^(veres|sovrin|btcr|uport|consensys)$/i, 'veres')
  .option('-v, --verbose', 'Verbose output')
  .version('0.1.0');

// create a DID
program
  .command('create')
  .description('Create a DID');

// get an existing DID Document
program
  .command('get')
  .description('Retrieves an existing DID Document');

// add an authentication key to a DID Document
program
  .command('authn-add')
  .description('Add an authentication key to a DID')
  .option('-d, --did', 'The DID to manage');

// rotate an authentication key for a DID document
program
  .command('authn-rotate')
  .description('Rotate an existing DID authentication key')
  .option('-d, --did', 'The DID to manage')
  .option('-o, --old-key', 'The old key identifier to rotate out');

// add an authorization to a DID Document
program
  .command('authz-add')
  .description('Add an authorization to a DID Document')
  .option('-d, --did', 'The DID to manage');

// remove an authorization from a DID Document
program
  .command('authz-remove')
  .description('Remove an authorization from a DID Document')
  .option('-d, --did', 'The DID to manage');

program.parse(process.argv);

if(!process.argv.slice(2).length) {
}

const command = program.args[0];
// @@: Maybe allow ledgers to add their own commands as well?
const supportedCommands = ['create', 'get', 'authn-add', 'authn-rotate',
                           'authz-add', 'authz-remove']
const didMethod = didMethods[program.ledger];
console.log(didMethod);

if (didMethod == undefined) {
  console.error('Error:', program.ledger, 'ledger not supported yet');
} else if (supportedCommands.indexOf(command) == -1) {
  console.error('Error: Unknown command', command);
  program.outputHelp();
} else if (didMethod[command] == undefined) {
  console.error('Error:', command, 'not implemented');
} else {
  didMethod[command](program);
}
